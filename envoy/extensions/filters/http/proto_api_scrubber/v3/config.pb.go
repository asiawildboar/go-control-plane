// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v5.29.3
// source: envoy/extensions/filters/http/proto_api_scrubber/v3/config.proto

package proto_api_scrubberv3

import (
	_ "github.com/cncf/xds/go/udpa/annotations"
	_ "github.com/cncf/xds/go/xds/annotations/v3"
	v31 "github.com/cncf/xds/go/xds/type/matcher/v3"
	v3 "github.com/envoyproxy/go-control-plane/envoy/config/core/v3"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An enum enlisting all the filtering modes supported by this filter.
type ProtoApiScrubberConfig_FilteringMode int32

const (
	// Override the original request/response body with the filtered
	// request/response body.
	ProtoApiScrubberConfig_OVERRIDE ProtoApiScrubberConfig_FilteringMode = 0
)

// Enum value maps for ProtoApiScrubberConfig_FilteringMode.
var (
	ProtoApiScrubberConfig_FilteringMode_name = map[int32]string{
		0: "OVERRIDE",
	}
	ProtoApiScrubberConfig_FilteringMode_value = map[string]int32{
		"OVERRIDE": 0,
	}
)

func (x ProtoApiScrubberConfig_FilteringMode) Enum() *ProtoApiScrubberConfig_FilteringMode {
	p := new(ProtoApiScrubberConfig_FilteringMode)
	*p = x
	return p
}

func (x ProtoApiScrubberConfig_FilteringMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtoApiScrubberConfig_FilteringMode) Descriptor() protoreflect.EnumDescriptor {
	return file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_enumTypes[0].Descriptor()
}

func (ProtoApiScrubberConfig_FilteringMode) Type() protoreflect.EnumType {
	return &file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_enumTypes[0]
}

func (x ProtoApiScrubberConfig_FilteringMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtoApiScrubberConfig_FilteringMode.Descriptor instead.
func (ProtoApiScrubberConfig_FilteringMode) EnumDescriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_rawDescGZIP(), []int{0, 0}
}

type ProtoApiScrubberConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The proto descriptor set for the proto services.
	DescriptorSet *DescriptorSet `protobuf:"bytes,1,opt,name=descriptor_set,json=descriptorSet,proto3" json:"descriptor_set,omitempty"`
	// Contains the restrictions for the supported proto elements.
	Restrictions *Restrictions `protobuf:"bytes,2,opt,name=restrictions,proto3" json:"restrictions,omitempty"`
	// Specifies the filtering mode of this filter.
	FilteringMode ProtoApiScrubberConfig_FilteringMode `protobuf:"varint,3,opt,name=filtering_mode,json=filteringMode,proto3,enum=envoy.extensions.filters.http.proto_api_scrubber.v3.ProtoApiScrubberConfig_FilteringMode" json:"filtering_mode,omitempty"`
}

func (x *ProtoApiScrubberConfig) Reset() {
	*x = ProtoApiScrubberConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtoApiScrubberConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtoApiScrubberConfig) ProtoMessage() {}

func (x *ProtoApiScrubberConfig) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtoApiScrubberConfig.ProtoReflect.Descriptor instead.
func (*ProtoApiScrubberConfig) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_rawDescGZIP(), []int{0}
}

func (x *ProtoApiScrubberConfig) GetDescriptorSet() *DescriptorSet {
	if x != nil {
		return x.DescriptorSet
	}
	return nil
}

func (x *ProtoApiScrubberConfig) GetRestrictions() *Restrictions {
	if x != nil {
		return x.Restrictions
	}
	return nil
}

func (x *ProtoApiScrubberConfig) GetFilteringMode() ProtoApiScrubberConfig_FilteringMode {
	if x != nil {
		return x.FilteringMode
	}
	return ProtoApiScrubberConfig_OVERRIDE
}

// Specifies the descriptor set for proto services.
type DescriptorSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// It could be passed by a local file through “Datasource.filename“ or
	// embedded in the “Datasource.inline_bytes“.
	DataSource *v3.DataSource `protobuf:"bytes,1,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
}

func (x *DescriptorSet) Reset() {
	*x = DescriptorSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescriptorSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescriptorSet) ProtoMessage() {}

func (x *DescriptorSet) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescriptorSet.ProtoReflect.Descriptor instead.
func (*DescriptorSet) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_rawDescGZIP(), []int{1}
}

func (x *DescriptorSet) GetDataSource() *v3.DataSource {
	if x != nil {
		return x.DataSource
	}
	return nil
}

// Contains the restrictions for the methods.
type Restrictions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the method restrictions.
	// Key - Fully qualified method name e.g., “endpoints.examples.bookstore.BookStore/GetShelf“.
	// Value - Method restrictions.
	MethodRestrictions map[string]*MethodRestrictions `protobuf:"bytes,1,rep,name=method_restrictions,json=methodRestrictions,proto3" json:"method_restrictions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Restrictions) Reset() {
	*x = Restrictions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Restrictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Restrictions) ProtoMessage() {}

func (x *Restrictions) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Restrictions.ProtoReflect.Descriptor instead.
func (*Restrictions) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_rawDescGZIP(), []int{2}
}

func (x *Restrictions) GetMethodRestrictions() map[string]*MethodRestrictions {
	if x != nil {
		return x.MethodRestrictions
	}
	return nil
}

// Contains the method restrictions which include the field level restrictions
// for the request and response fields.
type MethodRestrictions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Restrictions that apply to request fields of the method.
	// Key - field mask like path of the field eg, foo.bar.baz
	// Value - Restrictions map containing the mapping from restriction name to
	// the restriction values.
	RequestFieldRestrictions map[string]*RestrictionConfig `protobuf:"bytes,1,rep,name=request_field_restrictions,json=requestFieldRestrictions,proto3" json:"request_field_restrictions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Restrictions that apply to response fields of the method.
	// Key - field mask like path of the field eg, foo.bar.baz
	// Value - Restrictions map containing the mapping from restriction name to
	// the restriction values.
	ResponseFieldRestrictions map[string]*RestrictionConfig `protobuf:"bytes,2,rep,name=response_field_restrictions,json=responseFieldRestrictions,proto3" json:"response_field_restrictions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MethodRestrictions) Reset() {
	*x = MethodRestrictions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodRestrictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodRestrictions) ProtoMessage() {}

func (x *MethodRestrictions) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodRestrictions.ProtoReflect.Descriptor instead.
func (*MethodRestrictions) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_rawDescGZIP(), []int{3}
}

func (x *MethodRestrictions) GetRequestFieldRestrictions() map[string]*RestrictionConfig {
	if x != nil {
		return x.RequestFieldRestrictions
	}
	return nil
}

func (x *MethodRestrictions) GetResponseFieldRestrictions() map[string]*RestrictionConfig {
	if x != nil {
		return x.ResponseFieldRestrictions
	}
	return nil
}

// The restriction configuration.
type RestrictionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Matcher tree for matching requests and responses with the configured restrictions.
	// NOTE: Currently, only CEL expressions are supported for matching. Support for more
	// matchers will be added incrementally overtime.
	Matcher *v31.Matcher `protobuf:"bytes,1,opt,name=matcher,proto3" json:"matcher,omitempty"`
}

func (x *RestrictionConfig) Reset() {
	*x = RestrictionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestrictionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestrictionConfig) ProtoMessage() {}

func (x *RestrictionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestrictionConfig.ProtoReflect.Descriptor instead.
func (*RestrictionConfig) Descriptor() ([]byte, []int) {
	return file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_rawDescGZIP(), []int{4}
}

func (x *RestrictionConfig) GetMatcher() *v31.Matcher {
	if x != nil {
		return x.Matcher
	}
	return nil
}

var File_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto protoreflect.FileDescriptor

var file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_rawDesc = []byte{
	0x0a, 0x40, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x62,
	0x65, 0x72, 0x2f, 0x76, 0x33, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x33, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x63, 0x72, 0x75,
	0x62, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x1a, 0x1f, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x78, 0x64, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x33, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x78, 0x64, 0x73, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2f, 0x76, 0x33, 0x2f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x75, 0x64,
	0x70, 0x61, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x03, 0x0a, 0x16,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x70, 0x69, 0x53, 0x63, 0x72, 0x75, 0x62, 0x62, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x69, 0x0a, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x42,
	0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x62, 0x65,
	0x72, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x53,
	0x65, 0x74, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x65,
	0x74, 0x12, 0x65, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x61, 0x70,
	0x69, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x59, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x63, 0x72, 0x75,
	0x62, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x41, 0x70, 0x69,
	0x53, 0x63, 0x72, 0x75, 0x62, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x1d, 0x0a, 0x0d, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08,
	0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x10, 0x00, 0x22, 0x52, 0x0a, 0x0d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xac,
	0x02, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x8a, 0x01, 0x0a, 0x13, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x59, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x62, 0x65, 0x72,
	0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x8e, 0x01, 0x0a,
	0x17, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x65, 0x6e, 0x76, 0x6f,
	0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x90, 0x05,
	0x0a, 0x12, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa3, 0x01, 0x0a, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x65, 0x2e, 0x65, 0x6e, 0x76, 0x6f,
	0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x61, 0x70, 0x69, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x1b, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x66, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62,
	0x62, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x1a, 0x93, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x69,
	0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x62, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x94, 0x01, 0x0a, 0x1e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x5c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x62, 0x65, 0x72,
	0x2e, 0x76, 0x33, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x4b, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x78, 0x64, 0x73, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x76, 0x33, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x42, 0xd3, 0x01,
	0xba, 0x80, 0xc8, 0xd1, 0x06, 0x02, 0x10, 0x02, 0xd2, 0xc6, 0xa4, 0xe1, 0x06, 0x02, 0x08, 0x01,
	0x0a, 0x41, 0x69, 0x6f, 0x2e, 0x65, 0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x65, 0x6e, 0x76, 0x6f, 0x79, 0x2e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x62, 0x65, 0x72,
	0x2e, 0x76, 0x33, 0x42, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x6f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65,
	0x6e, 0x76, 0x6f, 0x79, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x67, 0x6f, 0x2d, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2f, 0x65, 0x6e, 0x76, 0x6f, 0x79,
	0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x62, 0x65, 0x72, 0x2f, 0x76, 0x33, 0x3b, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x63, 0x72, 0x75, 0x62, 0x62, 0x65,
	0x72, 0x76, 0x33, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_rawDescOnce sync.Once
	file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_rawDescData = file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_rawDesc
)

func file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_rawDescGZIP() []byte {
	file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_rawDescOnce.Do(func() {
		file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_rawDescData)
	})
	return file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_rawDescData
}

var file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_goTypes = []interface{}{
	(ProtoApiScrubberConfig_FilteringMode)(0), // 0: envoy.extensions.filters.http.proto_api_scrubber.v3.ProtoApiScrubberConfig.FilteringMode
	(*ProtoApiScrubberConfig)(nil),            // 1: envoy.extensions.filters.http.proto_api_scrubber.v3.ProtoApiScrubberConfig
	(*DescriptorSet)(nil),                     // 2: envoy.extensions.filters.http.proto_api_scrubber.v3.DescriptorSet
	(*Restrictions)(nil),                      // 3: envoy.extensions.filters.http.proto_api_scrubber.v3.Restrictions
	(*MethodRestrictions)(nil),                // 4: envoy.extensions.filters.http.proto_api_scrubber.v3.MethodRestrictions
	(*RestrictionConfig)(nil),                 // 5: envoy.extensions.filters.http.proto_api_scrubber.v3.RestrictionConfig
	nil,                                       // 6: envoy.extensions.filters.http.proto_api_scrubber.v3.Restrictions.MethodRestrictionsEntry
	nil,                                       // 7: envoy.extensions.filters.http.proto_api_scrubber.v3.MethodRestrictions.RequestFieldRestrictionsEntry
	nil,                                       // 8: envoy.extensions.filters.http.proto_api_scrubber.v3.MethodRestrictions.ResponseFieldRestrictionsEntry
	(*v3.DataSource)(nil),                     // 9: envoy.config.core.v3.DataSource
	(*v31.Matcher)(nil),                       // 10: xds.type.matcher.v3.Matcher
}
var file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_depIdxs = []int32{
	2,  // 0: envoy.extensions.filters.http.proto_api_scrubber.v3.ProtoApiScrubberConfig.descriptor_set:type_name -> envoy.extensions.filters.http.proto_api_scrubber.v3.DescriptorSet
	3,  // 1: envoy.extensions.filters.http.proto_api_scrubber.v3.ProtoApiScrubberConfig.restrictions:type_name -> envoy.extensions.filters.http.proto_api_scrubber.v3.Restrictions
	0,  // 2: envoy.extensions.filters.http.proto_api_scrubber.v3.ProtoApiScrubberConfig.filtering_mode:type_name -> envoy.extensions.filters.http.proto_api_scrubber.v3.ProtoApiScrubberConfig.FilteringMode
	9,  // 3: envoy.extensions.filters.http.proto_api_scrubber.v3.DescriptorSet.data_source:type_name -> envoy.config.core.v3.DataSource
	6,  // 4: envoy.extensions.filters.http.proto_api_scrubber.v3.Restrictions.method_restrictions:type_name -> envoy.extensions.filters.http.proto_api_scrubber.v3.Restrictions.MethodRestrictionsEntry
	7,  // 5: envoy.extensions.filters.http.proto_api_scrubber.v3.MethodRestrictions.request_field_restrictions:type_name -> envoy.extensions.filters.http.proto_api_scrubber.v3.MethodRestrictions.RequestFieldRestrictionsEntry
	8,  // 6: envoy.extensions.filters.http.proto_api_scrubber.v3.MethodRestrictions.response_field_restrictions:type_name -> envoy.extensions.filters.http.proto_api_scrubber.v3.MethodRestrictions.ResponseFieldRestrictionsEntry
	10, // 7: envoy.extensions.filters.http.proto_api_scrubber.v3.RestrictionConfig.matcher:type_name -> xds.type.matcher.v3.Matcher
	4,  // 8: envoy.extensions.filters.http.proto_api_scrubber.v3.Restrictions.MethodRestrictionsEntry.value:type_name -> envoy.extensions.filters.http.proto_api_scrubber.v3.MethodRestrictions
	5,  // 9: envoy.extensions.filters.http.proto_api_scrubber.v3.MethodRestrictions.RequestFieldRestrictionsEntry.value:type_name -> envoy.extensions.filters.http.proto_api_scrubber.v3.RestrictionConfig
	5,  // 10: envoy.extensions.filters.http.proto_api_scrubber.v3.MethodRestrictions.ResponseFieldRestrictionsEntry.value:type_name -> envoy.extensions.filters.http.proto_api_scrubber.v3.RestrictionConfig
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_init() }
func file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_init() {
	if File_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtoApiScrubberConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescriptorSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Restrictions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodRestrictions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestrictionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_goTypes,
		DependencyIndexes: file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_depIdxs,
		EnumInfos:         file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_enumTypes,
		MessageInfos:      file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_msgTypes,
	}.Build()
	File_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto = out.File
	file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_rawDesc = nil
	file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_goTypes = nil
	file_envoy_extensions_filters_http_proto_api_scrubber_v3_config_proto_depIdxs = nil
}
